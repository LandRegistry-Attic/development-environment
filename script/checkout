#!/bin/bash

set -e
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh

apps_and_ports=`cat /vagrant/config/apps | grep -v \# | grep -v '^\s*$'`
DEV_ENV_REQUIREMENTS=/vagrant/config/virtual-env-global-requirements.txt

function get_port_for_app {
  local app=$1 

  if [[ $(is_valid_app $app) = 1 ]] ; then
    for app_and_port in ${apps_and_ports}; do
      local found_app_name=`echo ${app_and_port} | cut -d':' -f1`
      local found_app_port=`echo ${app_and_port} | cut -d':' -f2`

      if [[ ${app} = ${found_app_name} ]] ; then
        echo $found_app_port
      fi
    done
  fi
}

function is_valid_app {
  local app=$1
  local found_app_name

  for app_and_port in ${apps_and_ports}; do
    found_app_name=`echo ${app_and_port} | cut -d':' -f1`

    if [[ ${app} = ${found_app_name} ]] ; then
      echo 1
    fi
  done
}

function get_directory_for_app {
  local app=$1  
}

function update_development_environment {
  echo "Updating development environment"
  git -C /vagrant pull 
  lr-bootstrap
}

function update_submodules_for_app {
  local app=$1
  local app_dir=/vagrant/apps/${app}

  if [[ -f ${app_dir}/.gitmodules ]] ; then
      echo "Initialising git submodule for ${app}"
      git -C ${app_dir} submodule init
      git -C ${app_dir} submodule update
  fi
}

function checkout {
  local app=$1
  local app_dir=/vagrant/apps/${app}

  if [[ ! -d ${app_dir} ]] ; then 
    mkdir -p /vagrant/apps/
    git -C /vagrant/apps/ clone git@github.com:landregistry/${app}.git
    update_submodules_for_app ${app}
  fi
}

function update_app {
  local app=$1
  local app_dir=/vagrant/apps/${app}

  if [ -d ${app_dir} ] ; then
    echo "Refreshing application ${app}"
    git -C ${app_dir} pull
    update_submodules_for_app ${app}
  fi
}

function install_requirements {
  local app_dir="/vagrant/apps/${1}"

  if [[ -f ${app_dir}/requirements.txt ]] ; then
    pip install -r ${app_dir}/requirements.txt
  fi 

  if [[ -f ${app_dir}/requirements_test.txt ]] ; then
    pip install -r ${app_dir}/requirements_test.txt
  fi 
}

function create_virtual_env {
  local app_name=$1

  if [[ ! -d ${WORKON_HOME}/${app_name} ]] ; then
    echo "Creating python virtual env for ${app_name} in ${WORKON_HOME}"
    set +o errexit
    mkvirtualenv -a ${PWD} -r ${DEV_ENV_REQUIREMENTS} ${app_name}
    set -e
  fi
  
  echo "Activating virtual envrionment [${app_name}]"
  set +o errexit
  workon ${app_name}
  set -e
  echo "Installing core requirements in virtual envrionment [${app_name}]"
  pip install -r ${DEV_ENV_REQUIREMENTS}
}

function remove_virtual_env {
  local app_name=$1

  if [[ -d ${WORKON_HOME}/${app_name} ]] ; then
    echo "Removing python virtual env for ${app_name} in ${WORKON_HOME}"
    set +o errexit
    rmvirtualenv ${app_name}
    set -e
  fi
}

function dump_apps_and_ports {
  local app

  for app in ${apps_and_ports}; do
    echo ${app}
  done
}

function check_all_apps_are_valid {
  for app_to_start in ${@}; do
    if [[ $(is_valid_app ${app_to_start}) != 1 ]] ; then
      echo
      echo "Can't find an app called [${app_to_start}] in the configuration file in /vagrant/config/apps"
      echo
      echo "The file currently contains:"
      echo
      dump_apps_and_ports
      echo
      exit 1
    fi
  done
}

function die_cant_find_any_apps {
  echo 
  echo "You've called this script without specifiy which apps you need and I can't find a run.sh" 
  echo "in the current directory [`pwd`]" 
  echo 
  echo "You either need to specify some apps, or lr-run-app from the base directory of an app with a run.sh" 
  echo 
  exit 1
}

function configure_virtual_env_for_apps {
  local apps_to_start=(${@})

  for app_to_start in ${apps_to_start}; do
    echo "Configuring virtual environment for ${app_to_start}"
    create_virtual_env ${app_to_start}
    install_requirements ${app_to_start}  
  done
}
