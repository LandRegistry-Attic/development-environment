#!/bin/bash

echo "Do not use. Doesn't account for requirements_test.txt"
exit 1

cat <<EOF

ONLY Use this script when the requirements for all apps are un-pegged (i.e. no
versions specified), and once all tests have been run, which will ensure
all virtual envs have been created, all deps and test-deps have been
installed, and all apps work well with the latest/un-pegged dependencies.

OK?
    <Ctrl-C> to cancel.
    <Enter> to proceed.
EOF
read IGNORED

#set -x
set -e

case `uname` in
	Linux)
		if [[ ! -d /vagrant ]] ; then
			echo "You need to be running in the vagrant VM to do this"
			exit 1
		fi
	;;

	*)
		
		echo
		echo
		echo "You need to be running in your vagrant virtual machine to run this."
		echo
		echo "Run vagrant ssh from the root directory of the development environment and then re-run this script"
		echo
		exit 1
	;;
esac

# depends on lr-utils, where the common requirements are kept.
LR_UTILS=/vagrant/apps/lr-utils
if [ ! -d $LR_UTILS ] ; then
  echo "Please clone $LR_UTILS first."
  exit 1
fi

WORKSPACE=${1:-$(mktemp -d -t requirements.XXXXXX)}

# where we'll capture requirements common to all apps
TEMP_COMMON_REQUIREMENTS=$WORKSPACE/requirements_common
rm -f $TEMP_COMMON_REQUIREMENTS 
# ALL requirements, even if they are the same dependencies but differ in version
TEMP_REQUIREMENTS_ALL=$WORKSPACE/requirements_all
# As before, but |sort|uniq
TEMP_REQUIREMENTS_ALL_TRIMMED=$WORKSPACE/requirements_all_trimmed
rm -f $TEMP_REQUIREMENTS_ALL_TRIMMED
# As before, but only the latest version fo each dependency
TEMP_REQUIREMENTS_LATEST=$WORKSPACE/requirements_latest
rm -f $TEMP_REQUIREMENTS_LATEST
touch $TEMP_REQUIREMENTS_LATEST
# As before, but without versions
TEMP_REQUIREMENTS_LATEST_SANS=$WORKSPACE/requirements_latest_sans
rm -f $TEMP_REQUIREMENTS_LATEST_SANS

source /vagrant/script/dev-env-functions
lr-bootstrap

# declare an app-to-filename mapping, where filename will be a temporary
# file containing the unpegged/unversioned dependencies for said app.
declare -A LOOKUP=()

function freeze_requirements_for_app {
  local the_app=$1

  if [ -e ${LOOKUP["${the_app}with_ro"]} ] ; then
    # clear the file we want to re-process
    rm -f ${LOOKUP["${the_app}with"]}
    cat ${LOOKUP["${the_app}with_ro"]} > ${LOOKUP["${the_app}with"]}
  else
    check_all_apps_are_valid ${the_app}

    set +o errexit
    configure_virtual_env_for_apps ${the_app}
    workon ${the_app}
    pip freeze >> ${LOOKUP["${the_app}with_ro"]}
    cat ${LOOKUP["${the_app}with_ro"]} >> ${LOOKUP["${the_app}with"]}
    cat ${LOOKUP["${the_app}with_ro"]} >> $TEMP_REQUIREMENTS_ALL

    # populate the requirements-sans-versions file
    while read line
    do
      DEPENDENCY=$line
      DEPENDENCY_SANS_VERSION=$DEPENDENCY
      if [[ ! $DEPENDENCY == *git+http* ]]; then
        DEPENDENCY_SANS_VERSION=$(echo -n $DEPENDENCY | cut -d'=' -f1)
      fi

      echo "$DEPENDENCY_SANS_VERSION" >> ${LOOKUP["${the_app}sans_ro"]}
    done < ${LOOKUP["${the_app}with_ro"]}

    deactivate
    set -e
    echo "Requirements for ${the_app} captured to $TEMP_REQUIREMENTS_ALL"
    echo
  fi
}

for app in $(all_apps); do

  pushd /vagrant/apps/${app} >/dev/null
  if [[ ! -f ./requirements.txt ]] ; then
    true
  else
    # get all un-pegged requirements as separate files, so we
    # can check which dependencies in TEMP_REQUIREMENTS_LATEST appear in 
    # ALL of them, the latter which will go into COMMON.
    LOOKUP["${app}with_ro"]="$WORKSPACE/requirements_with_ro_versions_for_$app"
    LOOKUP["${app}with"]="$WORKSPACE/requirements_with_versions_for_$app"
    LOOKUP["${app}sans_ro"]="$WORKSPACE/requirements_sans_ro_versions_for_$app"

    freeze_requirements_for_app ${app}
  fi
  popd >/dev/null
done

echo "workspace: $WORKSPACE"

# trim the common requirements
# (reverse sort to bubble latest versions to top)

cat $TEMP_REQUIREMENTS_ALL |sort -r |uniq > $TEMP_REQUIREMENTS_ALL_TRIMMED

echo "Getting latest versions of all dependencies..."
# now grab all the latest versions of each dependency
while read line
do
  DEPENDENCY=$line
  DEPENDENCY_SANS_VERSION=$DEPENDENCY
  if [[ ! $DEPENDENCY == *-e\ * ]]; then
    DEPENDENCY_SANS_VERSION=$(echo -n $DEPENDENCY | cut -d'=' -f1)
  fi

  if grep -q "^$DEPENDENCY_SANS_VERSION" $TEMP_REQUIREMENTS_LATEST
  then
    # latest version of dependency already captured
    true
  else
    echo "$DEPENDENCY" >> $TEMP_REQUIREMENTS_LATEST
    echo "$DEPENDENCY_SANS_VERSION" >> $TEMP_REQUIREMENTS_LATEST_SANS
  fi
done < $TEMP_REQUIREMENTS_ALL_TRIMMED

# once we have all the latest versions of everything, check if a latest
# version is defined for ALL apps, then make it common (and also
# remove that dependency from the app's requirements file (in the lookup).

echo "Getting common dependencies..."
while read DEPENDENCY
do
  COMMON_TO_ALL_APPS=true
  for app in $(all_apps); do
    # if a dependency is not defined for a project, then it is not common
    if ! grep -q "^$DEPENDENCY$" ${LOOKUP["${app}sans_ro"]}; then
      COMMON_TO_ALL_APPS=false
    fi
  done

  # if common to all apps, put in common location, and remove from apps' requirements.
  if $COMMON_TO_ALL_APPS == true ; then
    echo "COMMON $DEPENDENCY"
    for app in $(all_apps); do
      # TODO remove the dependency from {app}with

      echo "\tdel from ${LOOKUP["${app}with"]}"
      if [[ $DEPENDENCY == *-e\ * ]]; then
        sed -i '\%'"${DEPENDENCY}"'%d' ${LOOKUP["${app}with"]}
      else
        sed -i '/'"^${DEPENDENCY}==.*"'/d' ${LOOKUP["${app}with"]}
      fi
    done

    # put the dependency in common
    if [[ $DEPENDENCY == *-e\ * ]]; then
      grep $DEPENDENCY $TEMP_REQUIREMENTS_LATEST >> $TEMP_COMMON_REQUIREMENTS
    else
      grep "^$DEPENDENCY==" $TEMP_REQUIREMENTS_LATEST >> $TEMP_COMMON_REQUIREMENTS
    fi
  fi

done < $TEMP_REQUIREMENTS_LATEST_SANS

# finally, copy the new pegged requirements over the app requirements
if [ -e $TEMP_COMMON_REQUIREMENTS ] ; then
  COMMON_LOC=$LR_UTILS/requirements
  mkdir -p $COMMON_LOC
  cp $TEMP_COMMON_REQUIREMENTS  $COMMON_LOC/common.txt
  echo "please push $COMMON_LOC/common.txt to master"
fi

for app in $(all_apps); do
  cp ${LOOKUP["${app}with"]} /vagrant/apps/$app/requirements.txt
  # TODO copy this to requirements:
  # -r https://github.com/LandRegistry/lr-utils/blob/master/requirements/common.txt
done

DEBUG=true
if [[ $DEBUG == true ]] ; then
  echo 
  echo "workspace: $WORKSPACE"
  echo 
  echo $TEMP_REQUIREMENTS_ALL
  echo $TEMP_REQUIREMENTS_ALL_TRIMMED
  echo $TEMP_REQUIREMENTS_LATEST
  echo $TEMP_REQUIREMENTS_LATEST_SANS
  echo $TEMP_COMMON_REQUIREMENTS
  echo
  echo ${LOOKUP[@]}
fi

#cat $TEMP_REQUIREMENTS_LATEST |sort -r|uniq > $COMMON_REQUIREMENTS


